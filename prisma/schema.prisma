// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid())
  auth0_id       String    @unique
  email          String    @unique
  name           String?
  picture        String?
  isHostApproved Boolean   @default(false)
  profile        Profile?  @relation()
  listings       Listing[]
  host           Host?
  Booking        Booking[]
  reviews        Review[]
  favorites      FavoriteListing[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Host {
  userId String @id
  user   User   @relation(fields: [userId], references: [id])

  phoneNumber                String
  bio                        String?
  governmentId               String?
  idVerificationStatus       VerificationStatus @default(PENDING)
  businessName               String?
  businessLogo               String?
  businessRegistrationNumber String?
  businessAddress            String?
  socialMediaLinks           Json?
  hostRating                 Float              @default(0.0)
  asBusiness                 Boolean            @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  userId String @id
  user   User   @relation(fields: [userId], references: [id])

  country String?
  state   String?
  city    String?
  address String?

  isStudent   Boolean?
  isEmployed  Boolean?
  occupation  String?
  incomeRange String?
  interests   String[]

  preferredRentRange     String?
  preferredPropertyTypes String[]
  moveInDate             DateTime?
  stayDuration           String?
  hasPets                Boolean?
  hasChildren            Boolean?
  smoking                Boolean?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Listing {
  id           String   @id @default(uuid())
  title        String
  description  String
  price        Decimal
  listingType  String // <-- Changed from propertyType to listingType
  category     String
  address      String
  city         String
  country      String
  latitude     Float
  longitude    Float
  checkInTime  String
  checkOutTime String
  available    Boolean  @default(true)
  amenities    Json
  images       String[]
  hostId       String
  host         User     @relation(fields: [hostId], references: [id])

  bedrooms  Int @default(0)
  bathrooms Int @default(0)
  kitchens  Int @default(0)
  guests    Int @default(0)

  Booking   Booking[]
  reviews   Review[]
  favorites FavoriteListing[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FavoriteListing {
  id        String  @id @default(uuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  listingId String
  listing   Listing @relation(fields: [listingId], references: [id])

  createdAt DateTime @default(now())

  @@unique([userId, listingId])
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

model Booking {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  listingId  String
  listing    Listing  @relation(fields: [listingId], references: [id])
  startDate  DateTime
  endDate    DateTime
  guests     Int
  totalPrice Decimal

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  listingId String
  listing   Listing  @relation(fields: [listingId], references: [id])
  rating    Int      @default(5)
  comment   String

  createdAt DateTime @default(now())

  @@unique([userId, listingId])
}
