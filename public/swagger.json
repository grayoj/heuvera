{
  "openapi": "3.0.0",
  "info": {
    "title": "Heuvera",
    "version": "1.0.0",
    "description": "Heuvera API documentation with Swagger"
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/api/auth/user": {
      "post": {
        "summary": "Create a user",
        "description": "This endpoint creates a new user based on the provided Auth0 ID.",
        "tags": ["Users"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["auth0_id", "email", "created_at"],
                "properties": {
                  "auth0_id": {
                    "type": "string",
                    "description": "The unique identifier for the user from Auth0.",
                    "example": "auth0|123456789"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "The user's email address.",
                    "example": "user@example.com"
                  },
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "description": "The user's full name.",
                    "example": "John Doe"
                  },
                  "picture": {
                    "type": "string",
                    "format": "url",
                    "nullable": true,
                    "description": "URL to the user's profile picture.",
                    "example": "https://example.com/avatar.jpg"
                  },
                  "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The user's account creation date.",
                    "example": "2025-03-16T12:00:00Z"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created or updated the user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "type": "object",
                          "description": "The created or updated user object."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Invalid input"
                    },
                    "details": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "Details about validation errors."
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/verify": {
      "get": {
        "summary": "Retrieve or create a user from the session",
        "description": "Fetches an existing user or creates a new one if they do not exist in the database.",
        "tags": ["User"],
        "responses": {
          "200": {
            "description": "User retrieved or created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "newUser": {
                      "type": "boolean"
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "auth0_id": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "picture": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - No session found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/bookings": {
      "delete": {
        "summary": "Cancel a booking",
        "description": "Allows an authenticated user to cancel their booking if it hasn't started yet.",
        "tags": ["Bookings"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The ID of the booking to cancel."
          }
        ],
        "responses": {
          "200": {
            "description": "Booking cancelled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Booking ID is missing or cancellation is not allowed."
          },
          "401": {
            "description": "Unauthorized, user not logged in."
          },
          "403": {
            "description": "Booking not found or does not belong to the user."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "get": {
        "summary": "Get user bookings",
        "description": "Fetches all bookings made by the authenticated user.",
        "tags": ["Bookings"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of user bookings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "bookings": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "userId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "listingId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "startDate": {
                            "type": "string",
                            "format": "date"
                          },
                          "endDate": {
                            "type": "string",
                            "format": "date"
                          },
                          "guests": {
                            "type": "integer"
                          },
                          "totalPrice": {
                            "type": "number"
                          },
                          "listing": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "title": {
                                "type": "string"
                              },
                              "price": {
                                "type": "number"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, user not logged in."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "post": {
        "summary": "Create a new booking",
        "description": "Users can book a listing by providing the listing ID, start date, end date, and the number of guests.",
        "tags": ["Bookings"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "listingId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The UUID of the listing to book."
                  },
                  "startDate": {
                    "type": "string",
                    "format": "date",
                    "description": "The start date of the booking (YYYY-MM-DD)."
                  },
                  "endDate": {
                    "type": "string",
                    "format": "date",
                    "description": "The end date of the booking (YYYY-MM-DD)."
                  },
                  "guests": {
                    "type": "integer",
                    "minimum": 1,
                    "description": "Number of guests for the booking."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Booking successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "booking": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "listingId": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "userId": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "startDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "endDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "guests": {
                          "type": "integer"
                        },
                        "totalPrice": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request, invalid input."
          },
          "401": {
            "description": "Unauthorized, user not logged in."
          },
          "403": {
            "description": "Forbidden, user cannot book their own listing."
          },
          "404": {
            "description": "Listing not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/v1/bookings/{id}": {
      "get": {
        "summary": "Get booking details",
        "description": "Retrieves details of a specific booking for an authenticated user.",
        "tags": ["Bookings"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The ID of the booking to retrieve."
          }
        ],
        "responses": {
          "200": {
            "description": "Booking details retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "booking": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Booking ID is missing."
          },
          "401": {
            "description": "Unauthorized, user not logged in."
          },
          "403": {
            "description": "User is not authorized to view this booking."
          },
          "404": {
            "description": "Booking not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/v1/host": {
      "patch": {
        "summary": "Update host details",
        "description": "Updates host profile details. Only approved hosts can update their information.",
        "tags": ["Host"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "phoneNumber": {
                    "type": "string",
                    "minLength": 10,
                    "maxLength": 15
                  },
                  "bio": {
                    "type": "string"
                  },
                  "governmentId": {
                    "type": "string"
                  },
                  "idVerificationStatus": {
                    "type": "string",
                    "enum": ["PENDING", "VERIFIED", "REJECTED"]
                  },
                  "businessName": {
                    "type": "string"
                  },
                  "businessLogo": {
                    "type": "string",
                    "format": "url"
                  },
                  "businessRegistrationNumber": {
                    "type": "string"
                  },
                  "businessAddress": {
                    "type": "string"
                  },
                  "socialMediaLinks": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "asBusiness": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated the host profile.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "host": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Invalid input data."
          },
          "401": {
            "description": "Unauthorized. User must be authenticated."
          },
          "403": {
            "description": "Forbidden. User is not an approved host."
          }
        }
      }
    },
    "/api/v1/listings": {
      "delete": {
        "summary": "Delete a property listing",
        "description": "Allows an approved host to delete one of their property listings.",
        "tags": ["Listings"],
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the listing to delete."
          }
        ],
        "responses": {
          "200": {
            "description": "Listing deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "listing": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Listing ID is required or validation failed."
          },
          "401": {
            "description": "Unauthorized - User is not authenticated."
          },
          "403": {
            "description": "Forbidden - User is not approved as a host."
          }
        }
      },
      "get": {
        "summary": "Retrieve paginated property listings",
        "description": "Fetches a paginated list of property listings, sorted by creation date in descending order.",
        "tags": ["Listings"],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "The page number to retrieve."
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "The number of listings per page."
          }
        ],
        "responses": {
          "200": {
            "description": "A list of property listings with pagination metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "listings": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "integer"
                        },
                        "pageSize": {
                          "type": "integer"
                        },
                        "totalPages": {
                          "type": "integer"
                        },
                        "totalCount": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "patch": {
        "summary": "Update a property listing",
        "description": "Allows an approved host to update an existing property listing.",
        "tags": ["Listings"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the listing to update."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "minLength": 5
                  },
                  "description": {
                    "type": "string",
                    "minLength": 10
                  },
                  "price": {
                    "type": "number"
                  },
                  "listingType": {
                    "type": "string"
                  },
                  "category": {
                    "type": "string"
                  },
                  "address": {
                    "type": "string"
                  },
                  "city": {
                    "type": "string"
                  },
                  "country": {
                    "type": "string"
                  },
                  "latitude": {
                    "type": "number"
                  },
                  "longitude": {
                    "type": "number"
                  },
                  "checkInTime": {
                    "type": "string"
                  },
                  "checkOutTime": {
                    "type": "string"
                  },
                  "available": {
                    "type": "boolean"
                  },
                  "amenities": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "images": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Listing updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "listing": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Validation failed or missing listing ID"
          },
          "401": {
            "description": "Unauthorized - User not found"
          },
          "403": {
            "description": "Forbidden - User is not an approved host"
          }
        }
      },
      "post": {
        "summary": "Create a new property listing",
        "description": "Allows an approved host to create a new property listing.",
        "tags": ["Listings"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "minLength": 5
                  },
                  "description": {
                    "type": "string",
                    "minLength": 10
                  },
                  "price": {
                    "type": "number"
                  },
                  "listingType": {
                    "type": "string"
                  },
                  "category": {
                    "type": "string"
                  },
                  "address": {
                    "type": "string"
                  },
                  "city": {
                    "type": "string"
                  },
                  "country": {
                    "type": "string"
                  },
                  "latitude": {
                    "type": "number"
                  },
                  "longitude": {
                    "type": "number"
                  },
                  "checkInTime": {
                    "type": "string"
                  },
                  "checkOutTime": {
                    "type": "string"
                  },
                  "available": {
                    "type": "boolean",
                    "default": true
                  },
                  "amenities": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "images": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "minItems": 1
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Listing created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "listing": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Validation failed"
          },
          "401": {
            "description": "Unauthorized - User not found"
          },
          "403": {
            "description": "Forbidden - User is not an approved host"
          }
        }
      }
    },
    "/api/v1/listings/{id}": {
      "get": {
        "summary": "Get a listing by ID",
        "description": "Retrieve details of a specific listing by its ID, including host details.",
        "tags": ["Listings"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the listing to retrieve."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the listing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "listing": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Listing ID is required."
          },
          "404": {
            "description": "Listing not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/v1/profile": {
      "patch": {
        "summary": "Update or create user profile",
        "description": "Updates the user's profile if it exists, otherwise creates a new one.",
        "tags": ["Profile"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "country": {
                    "type": "string"
                  },
                  "state": {
                    "type": "string"
                  },
                  "city": {
                    "type": "string"
                  },
                  "address": {
                    "type": "string"
                  },
                  "isStudent": {
                    "type": "boolean"
                  },
                  "isEmployed": {
                    "type": "boolean"
                  },
                  "occupation": {
                    "type": "string"
                  },
                  "incomeRange": {
                    "type": "string"
                  },
                  "interests": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "preferredRentRange": {
                    "type": "string"
                  },
                  "preferredListingTypes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "moveInDate": {
                    "type": "string"
                  },
                  "stayDuration": {
                    "type": "string"
                  },
                  "hasPets": {
                    "type": "boolean"
                  },
                  "hasChildren": {
                    "type": "boolean"
                  },
                  "smoking": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "profile": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Validation failed"
          },
          "401": {
            "description": "Unauthorized - User not found"
          }
        }
      }
    },
    "/api/v1/user": {
      "get": {
        "summary": "Get logged-in user",
        "description": "Retrieves details of the currently authenticated user.",
        "tags": ["Users"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved user details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "email": {
                      "type": "string",
                      "format": "email"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, user not logged in."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    }
  },
  "tags": []
}
